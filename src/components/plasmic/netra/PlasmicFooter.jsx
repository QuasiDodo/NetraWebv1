// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: deKwkoK4pA1w3jYaAefVBE
// Component: rUgGjC8cM1U1l
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import { useScreenVariants as useScreenVariantsrjDmXlLiWnTyry } from "./PlasmicGlobalVariant__Screen" // plasmic-import: rjDmXLLiWNTyry/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_netra.module.css" // plasmic-import: deKwkoK4pA1w3jYaAefVBE/projectcss
import * as sty from "./PlasmicFooter.module.css" // plasmic-import: rUgGjC8cM1U1l/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3" // plasmic-import: N54HoqGP4VcoPc/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2" // plasmic-import: ElGSs9AuHMLhTU/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28" // plasmic-import: 0DmeRTl_cL90bI/icon
import IconIcon from "./icons/PlasmicIcon__Icon" // plasmic-import: sotM-oLTv4PQoT/icon

export const PlasmicFooter__VariantProps = new Array()

export const PlasmicFooter__ArgProps = new Array()

export const defaultFooter__Args = {}

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const args = Object.assign({}, defaultFooter__Args, props.args)
  const $props = args
  const $ctx = ph.useDataEnv?.() || {}
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsrjDmXlLiWnTyry(),
  })

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__iPbr9)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__djlbQ)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sbWx)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__inA6K)}
            >
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__xVanq
                )}
              >
                {"Company Name"}
              </h3>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wquaA
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {"This site proudly built in "}
                  </React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__ub484
                    )}
                    component={Link}
                    href={"https://www.plasmic.app"}
                    platform={"gatsby"}
                  >
                    {"Plasmic"}
                  </p.PlasmicLink>
                  <React.Fragment>{"."}</React.Fragment>
                </React.Fragment>
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___86KCn
                )}
              >
                {"Connect with us"}
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__p5ARo)}
              >
                {true ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__jCyPs
                    )}
                    component={Link}
                    href={"#"}
                    platform={"gatsby"}
                    target={"_blank"}
                  >
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg___8Yx5J)}
                      role={"img"}
                    />
                  </p.PlasmicLink>
                ) : null}
                {true ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__khjNv
                    )}
                    component={Link}
                    href={"#"}
                    platform={"gatsby"}
                    target={"_blank"}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__jtHny)}
                      role={"img"}
                    />
                  </p.PlasmicLink>
                ) : null}
                {true ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__cm30R
                    )}
                    component={Link}
                    href={"#"}
                    platform={"gatsby"}
                    target={"_blank"}
                  >
                    <Icon28Icon
                      className={classNames(projectcss.all, sty.svg__sS4Je)}
                      role={"img"}
                    />
                  </p.PlasmicLink>
                ) : null}
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yNnx)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3___2Yhu4
              )}
            >
              {"Photography"}
            </h3>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___85Edm
              )}
              component={Link}
              platform={"gatsby"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___1E1Jj)}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hhua1
                )}
              >
                {"Services"}
              </div>

              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___5TYCv)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__mbRkr
              )}
              component={Link}
              platform={"gatsby"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__iuv7Z)}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__m0Jf2
                )}
              >
                {"Stories"}
              </div>

              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__sBgI3)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___4Kw72)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__r8790
              )}
            >
              {"Company"}
            </h3>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__gnVlI
              )}
              component={Link}
              platform={"gatsby"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__c39Ww)}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tT5Th
                )}
              >
                {"Contact us"}
              </div>

              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___0DckA)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__d5WnU
              )}
              component={Link}
              platform={"gatsby"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__dCsE)}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dnNh
                )}
              >
                {"About us"}
              </div>

              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__rsRw2)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps,
    })

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter"
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`
  }
  return func
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps,
  }
)

export default PlasmicFooter
/* prettier-ignore-end */
